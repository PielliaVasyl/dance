# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-05-26 15:04
from __future__ import unicode_literals

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('classes', '0001_initial'),
        ('dance_styles', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AbstractLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('link',),
            },
        ),
        migrations.CreateModel(
            name='AbstractLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(blank=True, max_length=100)),
                ('note', models.CharField(blank=True, max_length=100)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('created',),
            },
        ),
        migrations.CreateModel(
            name='AbstractMapCoordinates',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lat', models.CharField(max_length=20)),
                ('lng', models.CharField(max_length=20)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('created',),
            },
        ),
        migrations.CreateModel(
            name='AbstractShouldKnow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('image', models.ImageField(blank=True, upload_to='')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('updated',),
            },
        ),
        migrations.CreateModel(
            name='AbstractSocialLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('created',),
            },
        ),
        migrations.CreateModel(
            name='AbstractTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='AbstractType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('created',),
            },
        ),
        migrations.CreateModel(
            name='AbstractWiki',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='AbstractWikiGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('created',),
            },
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('image', models.ImageField(blank=True, upload_to='')),
                ('is_linked_article', models.BooleanField(default=False)),
                ('article_link', models.URLField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('created',),
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(blank=True, max_length=50)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('city',),
            },
        ),
        migrations.CreateModel(
            name='Contacts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='DanceClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('note', models.TextField(blank=True)),
                ('image', models.ImageField(blank=True, upload_to='')),
                ('video', models.URLField(blank=True)),
                ('status', models.CharField(blank=True, choices=[('PL', 'Запланировано'), ('DN', 'Отменено'), ('PP', 'Перенесено'), ('HL', 'Проводится'), ('CL', 'Завершено')], default='PL', max_length=2)),
                ('start_date', models.DateField(blank=True, default=datetime.date.today, null=True)),
                ('end_date', models.DateField(blank=True, default=datetime.date.today, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='DanceClassExperienceLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(choices=[('NEW', 'Начинающий'), ('INM', 'Средний'), ('ADV', 'Опытный'), ('SHW', 'Шоу'), ('PRC', 'Практика')], default='NEW', max_length=3)),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('created',),
            },
        ),
        migrations.CreateModel(
            name='DanceClassPriceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(choices=[('PAID', 'Платно'), ('FREE', 'Бесплатно'), ('SHWR', 'Условно-бесплатно'), ('FLRF', 'Первое занятие бесплатно')], default='PAID', max_length=4)),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('created',),
            },
        ),
        migrations.CreateModel(
            name='DanceHall',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='DanceHallPhoto',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('photo', models.ImageField(upload_to='')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('created',),
            },
        ),
        migrations.CreateModel(
            name='DanceShop',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='DanceShopPhoto',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('photo', models.ImageField(upload_to='')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('created',),
            },
        ),
        migrations.CreateModel(
            name='DanceStudio',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('logo', models.ImageField(blank=True, upload_to='')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='DanceStyle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='DanceStyleDirection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(choices=[('BAL', 'Балет'), ('LAT', 'Латина')], default='LAT', max_length=3)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='DanceStyleInSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True)),
                ('image', models.ImageField(blank=True, upload_to='')),
                ('video', models.URLField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('attendee_ages', models.ManyToManyField(blank=True, to='dance_styles.DanceStyleInSectionAttendeeAge')),
            ],
            options={
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('note', models.TextField(blank=True)),
                ('image', models.ImageField(blank=True, upload_to='')),
                ('video', models.URLField(blank=True)),
                ('status', models.CharField(blank=True, choices=[('PL', 'Запланировано'), ('DN', 'Отменено'), ('PP', 'Перенесено'), ('HL', 'Проводится'), ('CL', 'Завершено')], default='PL', max_length=2)),
                ('start_date', models.DateField(blank=True, default=datetime.date.today, null=True)),
                ('end_date', models.DateField(blank=True, default=datetime.date.today, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('start_date',),
            },
        ),
        migrations.CreateModel(
            name='Instructor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('image', models.ImageField(blank=True, upload_to='')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='PhoneNumber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(blank=True, max_length=16, validators=[django.core.validators.RegexValidator(message="Введите номер телефона в формате: '+380XXXXXXX'. Разрешено до 15 цифр.", regex='^\\+?1?\\d{9,15}$')])),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('created',),
            },
        ),
        migrations.CreateModel(
            name='PlaceInMap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True)),
                ('image', models.ImageField(blank=True, upload_to='')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('created',),
            },
        ),
        migrations.CreateModel(
            name='Socials',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(blank=True, default=None, max_length=50, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='VisitorMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visitor_name', models.CharField(max_length=50)),
                ('visitor_email', models.EmailField(max_length=254)),
                ('visitor_phone_number', models.CharField(blank=True, max_length=50)),
                ('message_subject', models.CharField(max_length=100)),
                ('message_text', models.TextField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('created',),
            },
        ),
        migrations.CreateModel(
            name='AudioWiki',
            fields=[
                ('abstractwiki_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractWiki')),
                ('singer', models.CharField(blank=True, max_length=100)),
            ],
            bases=('entities.abstractwiki',),
        ),
        migrations.CreateModel(
            name='AudioWikiLink',
            fields=[
                ('abstractlink_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractLink')),
            ],
            bases=('entities.abstractlink',),
        ),
        migrations.CreateModel(
            name='AudioWikiPlaylist',
            fields=[
                ('abstractwikigroup_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractWikiGroup')),
            ],
            bases=('entities.abstractwikigroup',),
        ),
        migrations.CreateModel(
            name='AudioWikiPlaylistLink',
            fields=[
                ('abstractlink_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractLink')),
            ],
            bases=('entities.abstractlink',),
        ),
        migrations.CreateModel(
            name='AudioWikiTag',
            fields=[
                ('abstracttag_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractTag')),
            ],
            bases=('entities.abstracttag',),
        ),
        migrations.CreateModel(
            name='DanceClassLink',
            fields=[
                ('abstractlink_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractLink')),
            ],
            bases=('entities.abstractlink',),
        ),
        migrations.CreateModel(
            name='DanceClassType',
            fields=[
                ('abstracttype_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractType')),
                ('title', models.CharField(choices=[('GRUP', 'Групповые занятия'), ('OPLS', 'Открытый урок')], default='GRUP', max_length=4)),
            ],
            bases=('entities.abstracttype',),
        ),
        migrations.CreateModel(
            name='DanceHallLink',
            fields=[
                ('abstractlink_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractLink')),
            ],
            bases=('entities.abstractlink',),
        ),
        migrations.CreateModel(
            name='DanceHallLocation',
            fields=[
                ('abstractlocation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractLocation')),
            ],
            bases=('entities.abstractlocation',),
        ),
        migrations.CreateModel(
            name='DanceHallMapCoordinates',
            fields=[
                ('abstractmapcoordinates_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractMapCoordinates')),
            ],
            bases=('entities.abstractmapcoordinates',),
        ),
        migrations.CreateModel(
            name='DanceShopLink',
            fields=[
                ('abstractlink_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractLink')),
            ],
            bases=('entities.abstractlink',),
        ),
        migrations.CreateModel(
            name='DanceShopLocation',
            fields=[
                ('abstractlocation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractLocation')),
            ],
            bases=('entities.abstractlocation',),
        ),
        migrations.CreateModel(
            name='DanceShopMapCoordinates',
            fields=[
                ('abstractmapcoordinates_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractMapCoordinates')),
            ],
            bases=('entities.abstractmapcoordinates',),
        ),
        migrations.CreateModel(
            name='DanceStudioLink',
            fields=[
                ('abstractlink_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractLink')),
            ],
            bases=('entities.abstractlink',),
        ),
        migrations.CreateModel(
            name='DanceStudioLocation',
            fields=[
                ('abstractlocation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractLocation')),
            ],
            bases=('entities.abstractlocation',),
        ),
        migrations.CreateModel(
            name='DanceStudioMapCoordinates',
            fields=[
                ('abstractmapcoordinates_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractMapCoordinates')),
            ],
            bases=('entities.abstractmapcoordinates',),
        ),
        migrations.CreateModel(
            name='EventLink',
            fields=[
                ('abstractlink_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractLink')),
            ],
            bases=('entities.abstractlink',),
        ),
        migrations.CreateModel(
            name='EventLocation',
            fields=[
                ('abstractlocation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractLocation')),
            ],
            bases=('entities.abstractlocation',),
        ),
        migrations.CreateModel(
            name='EventType',
            fields=[
                ('abstracttype_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractType')),
                ('title', models.CharField(choices=[('FEST', 'Фестивать'), ('COMP', 'Конкурс'), ('MCLS', 'Мастер-класс'), ('OAIR', 'Open air'), ('PART', 'Вечеринка')], default='MCLS', max_length=4)),
            ],
            bases=('entities.abstracttype',),
        ),
        migrations.CreateModel(
            name='InstructorLink',
            fields=[
                ('abstractlink_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractLink')),
            ],
            bases=('entities.abstractlink',),
        ),
        migrations.CreateModel(
            name='InstructorLocation',
            fields=[
                ('abstractlocation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractLocation')),
            ],
            bases=('entities.abstractlocation',),
        ),
        migrations.CreateModel(
            name='LinkShouldKnow',
            fields=[
                ('abstractshouldknow_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractShouldKnow')),
                ('direction', models.CharField(choices=[('OTH', 'Другое')], default='OTH', max_length=3)),
            ],
            bases=('entities.abstractshouldknow',),
        ),
        migrations.CreateModel(
            name='LinkShouldKnowLink',
            fields=[
                ('abstractlink_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractLink')),
            ],
            bases=('entities.abstractlink',),
        ),
        migrations.CreateModel(
            name='OrganizationShouldKnow',
            fields=[
                ('abstractshouldknow_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractShouldKnow')),
                ('direction', models.CharField(choices=[('OTH', 'Другое')], default='OTH', max_length=3)),
            ],
            bases=('entities.abstractshouldknow',),
        ),
        migrations.CreateModel(
            name='OrganizationShouldKnowLink',
            fields=[
                ('abstractlink_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractLink')),
            ],
            bases=('entities.abstractlink',),
        ),
        migrations.CreateModel(
            name='PersonShouldKnow',
            fields=[
                ('abstractshouldknow_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractShouldKnow')),
                ('direction', models.CharField(choices=[('OTH', 'Другое')], default='OTH', max_length=3)),
            ],
            bases=('entities.abstractshouldknow',),
        ),
        migrations.CreateModel(
            name='PersonShouldKnowLink',
            fields=[
                ('abstractlink_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractLink')),
            ],
            bases=('entities.abstractlink',),
        ),
        migrations.CreateModel(
            name='PhotoWiki',
            fields=[
                ('abstractwiki_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractWiki')),
                ('photographer', models.CharField(blank=True, max_length=100)),
                ('image', models.ImageField(blank=True, upload_to='')),
            ],
            bases=('entities.abstractwiki',),
        ),
        migrations.CreateModel(
            name='PhotoWikiAlbum',
            fields=[
                ('abstractwikigroup_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractWikiGroup')),
                ('photos', models.ManyToManyField(blank=True, to='entities.PhotoWiki')),
            ],
            bases=('entities.abstractwikigroup',),
        ),
        migrations.CreateModel(
            name='PhotoWikiTag',
            fields=[
                ('abstracttag_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractTag')),
            ],
            bases=('entities.abstracttag',),
        ),
        migrations.CreateModel(
            name='PlaceInMapLocation',
            fields=[
                ('abstractlocation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractLocation')),
            ],
            bases=('entities.abstractlocation',),
        ),
        migrations.CreateModel(
            name='PlaceInMapMapCoordinates',
            fields=[
                ('abstractmapcoordinates_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractMapCoordinates')),
            ],
            bases=('entities.abstractmapcoordinates',),
        ),
        migrations.CreateModel(
            name='PlaceType',
            fields=[
                ('abstracttype_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractType')),
                ('title', models.CharField(choices=[('OADP', 'Open air')], default='OADP', max_length=4)),
            ],
            bases=('entities.abstracttype',),
        ),
        migrations.CreateModel(
            name='ShopType',
            fields=[
                ('abstracttype_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractType')),
                ('title', models.CharField(choices=[('INSH', 'Интернет-магазин'), ('ORSH', 'Магазин')], default='ORSH', max_length=4)),
            ],
            bases=('entities.abstracttype',),
        ),
        migrations.CreateModel(
            name='SocialLinkFB',
            fields=[
                ('abstractsociallink_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractSocialLink')),
            ],
            bases=('entities.abstractsociallink',),
        ),
        migrations.CreateModel(
            name='SocialLinkInstagram',
            fields=[
                ('abstractsociallink_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractSocialLink')),
            ],
            bases=('entities.abstractsociallink',),
        ),
        migrations.CreateModel(
            name='SocialLinkTwitter',
            fields=[
                ('abstractsociallink_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractSocialLink')),
            ],
            bases=('entities.abstractsociallink',),
        ),
        migrations.CreateModel(
            name='SocialLinkVK',
            fields=[
                ('abstractsociallink_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractSocialLink')),
            ],
            bases=('entities.abstractsociallink',),
        ),
        migrations.CreateModel(
            name='VideoWiki',
            fields=[
                ('abstractwiki_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractWiki')),
            ],
            bases=('entities.abstractwiki',),
        ),
        migrations.CreateModel(
            name='VideoWikiLink',
            fields=[
                ('abstractlink_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractLink')),
            ],
            bases=('entities.abstractlink',),
        ),
        migrations.CreateModel(
            name='VideoWikiPlaylist',
            fields=[
                ('abstractwikigroup_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractWikiGroup')),
            ],
            bases=('entities.abstractwikigroup',),
        ),
        migrations.CreateModel(
            name='VideoWikiPlaylistLink',
            fields=[
                ('abstractlink_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractLink')),
            ],
            bases=('entities.abstractlink',),
        ),
        migrations.CreateModel(
            name='VideoWikiTag',
            fields=[
                ('abstracttag_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='entities.AbstractTag')),
                ('start_time', models.TimeField(blank=True)),
                ('end_time', models.TimeField(blank=True)),
            ],
            bases=('entities.abstracttag',),
        ),
        migrations.AddField(
            model_name='socials',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='placeinmap',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='placeinmap',
            name='dance_styles',
            field=models.ManyToManyField(blank=True, to='entities.DanceStyle'),
        ),
        migrations.AddField(
            model_name='phonenumber',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='instructor',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='instructor',
            name='contacts',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.Contacts'),
        ),
        migrations.AddField(
            model_name='instructor',
            name='dance_styles',
            field=models.ManyToManyField(blank=True, to='entities.DanceStyle'),
        ),
        migrations.AddField(
            model_name='instructor',
            name='events',
            field=models.ManyToManyField(blank=True, to='entities.Event'),
        ),
        migrations.AddField(
            model_name='event',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='event',
            name='dance_styles',
            field=models.ManyToManyField(blank=True, to='entities.DanceStyle'),
        ),
        migrations.AddField(
            model_name='dancestyleinsection',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='dancestyleinsection',
            name='average_prices',
            field=models.ManyToManyField(blank=True, to='dance_styles.DanceStyleInSectionAveragePrice'),
        ),
        migrations.AddField(
            model_name='dancestyleinsection',
            name='between_partners_distances',
            field=models.ManyToManyField(blank=True, to='dance_styles.DanceStyleInSectionBetweenPartnersDistance'),
        ),
        migrations.AddField(
            model_name='dancestyleinsection',
            name='count_types',
            field=models.ManyToManyField(blank=True, to='dance_styles.DanceStyleInSectionCountType'),
        ),
        migrations.AddField(
            model_name='dancestyleinsection',
            name='dance_style',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='entities.DanceStyle'),
        ),
        migrations.AddField(
            model_name='dancestyledirection',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='dancestyle',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='dancestyle',
            name='direction',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.DanceStyleDirection'),
        ),
        migrations.AddField(
            model_name='dancestudio',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='dancestudio',
            name='contacts',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.Contacts'),
        ),
        migrations.AddField(
            model_name='dancestudio',
            name='dance_styles',
            field=models.ManyToManyField(blank=True, to='entities.DanceStyle'),
        ),
        migrations.AddField(
            model_name='dancestudio',
            name='instructors',
            field=models.ManyToManyField(blank=True, to='entities.Instructor'),
        ),
        migrations.AddField(
            model_name='danceshopphoto',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='danceshop',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='danceshop',
            name='contacts',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.Contacts'),
        ),
        migrations.AddField(
            model_name='danceshop',
            name='photos',
            field=models.ManyToManyField(blank=True, to='entities.DanceShopPhoto'),
        ),
        migrations.AddField(
            model_name='dancehallphoto',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='dancehall',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='dancehall',
            name='contacts',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.Contacts'),
        ),
        migrations.AddField(
            model_name='dancehall',
            name='photos',
            field=models.ManyToManyField(blank=True, to='entities.DanceHallPhoto'),
        ),
        migrations.AddField(
            model_name='danceclasspricetype',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='danceclassexperiencelevel',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='danceclass',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='danceclass',
            name='dance_studio',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.DanceStudio'),
        ),
        migrations.AddField(
            model_name='danceclass',
            name='dance_styles',
            field=models.ManyToManyField(blank=True, to='entities.DanceStyle'),
        ),
        migrations.AddField(
            model_name='danceclass',
            name='experience_levels',
            field=models.ManyToManyField(blank=True, to='entities.DanceClassExperienceLevel'),
        ),
        migrations.AddField(
            model_name='danceclass',
            name='instructors',
            field=models.ManyToManyField(blank=True, to='entities.Instructor'),
        ),
        migrations.AddField(
            model_name='danceclass',
            name='price_types',
            field=models.ManyToManyField(blank=True, to='entities.DanceClassPriceType'),
        ),
        migrations.AddField(
            model_name='danceclass',
            name='schedule_week_days',
            field=models.ManyToManyField(blank=True, to='classes.WeekDay'),
        ),
        migrations.AddField(
            model_name='contacts',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='contacts',
            name='phone_numbers',
            field=models.ManyToManyField(blank=True, to='entities.PhoneNumber'),
        ),
        migrations.AddField(
            model_name='contacts',
            name='socials',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.Socials'),
        ),
        migrations.AddField(
            model_name='article',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='abstractwikigroup',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='abstractwiki',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='abstractwiki',
            name='dance_styles',
            field=models.ManyToManyField(blank=True, to='entities.DanceStyle'),
        ),
        migrations.AddField(
            model_name='abstracttype',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='abstractsociallink',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='abstractshouldknow',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='abstractmapcoordinates',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='abstractlocation',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='abstractlocation',
            name='city',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.City'),
        ),
        migrations.AddField(
            model_name='abstractlink',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.UserProfile'),
        ),
        migrations.AddField(
            model_name='videowikiplaylist',
            name='dance_style',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.DanceStyle'),
        ),
        migrations.AddField(
            model_name='videowikiplaylist',
            name='link',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.VideoWikiPlaylistLink'),
        ),
        migrations.AddField(
            model_name='videowiki',
            name='link',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.VideoWikiLink'),
        ),
        migrations.AddField(
            model_name='videowiki',
            name='tags',
            field=models.ManyToManyField(blank=True, to='entities.VideoWikiTag'),
        ),
        migrations.AddField(
            model_name='socials',
            name='fb',
            field=models.ManyToManyField(blank=True, to='entities.SocialLinkFB'),
        ),
        migrations.AddField(
            model_name='socials',
            name='instagram',
            field=models.ManyToManyField(blank=True, to='entities.SocialLinkInstagram'),
        ),
        migrations.AddField(
            model_name='socials',
            name='twitter',
            field=models.ManyToManyField(blank=True, to='entities.SocialLinkTwitter'),
        ),
        migrations.AddField(
            model_name='socials',
            name='vk',
            field=models.ManyToManyField(blank=True, to='entities.SocialLinkVK'),
        ),
        migrations.AddField(
            model_name='placeinmaplocation',
            name='coordinates',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.PlaceInMapMapCoordinates'),
        ),
        migrations.AddField(
            model_name='placeinmap',
            name='locations',
            field=models.ManyToManyField(blank=True, to='entities.PlaceInMapLocation'),
        ),
        migrations.AddField(
            model_name='placeinmap',
            name='place_types',
            field=models.ManyToManyField(blank=True, to='entities.PlaceType'),
        ),
        migrations.AddField(
            model_name='photowiki',
            name='tags',
            field=models.ManyToManyField(blank=True, to='entities.PhotoWikiTag'),
        ),
        migrations.AddField(
            model_name='personshouldknow',
            name='links',
            field=models.ManyToManyField(blank=True, to='entities.PersonShouldKnowLink'),
        ),
        migrations.AddField(
            model_name='organizationshouldknow',
            name='links',
            field=models.ManyToManyField(blank=True, to='entities.OrganizationShouldKnowLink'),
        ),
        migrations.AddField(
            model_name='linkshouldknow',
            name='links',
            field=models.ManyToManyField(blank=True, to='entities.LinkShouldKnowLink'),
        ),
        migrations.AddField(
            model_name='instructor',
            name='links',
            field=models.ManyToManyField(blank=True, to='entities.InstructorLink'),
        ),
        migrations.AddField(
            model_name='instructor',
            name='locations',
            field=models.ManyToManyField(blank=True, to='entities.InstructorLocation'),
        ),
        migrations.AddField(
            model_name='event',
            name='event_types',
            field=models.ManyToManyField(blank=True, to='entities.EventType'),
        ),
        migrations.AddField(
            model_name='event',
            name='links',
            field=models.ManyToManyField(blank=True, to='entities.EventLink'),
        ),
        migrations.AddField(
            model_name='event',
            name='locations',
            field=models.ManyToManyField(blank=True, to='entities.EventLocation'),
        ),
        migrations.AddField(
            model_name='dancestudiolocation',
            name='coordinates',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.DanceStudioMapCoordinates'),
        ),
        migrations.AddField(
            model_name='dancestudio',
            name='links',
            field=models.ManyToManyField(blank=True, to='entities.DanceStudioLink'),
        ),
        migrations.AddField(
            model_name='dancestudio',
            name='locations',
            field=models.ManyToManyField(blank=True, to='entities.DanceStudioLocation'),
        ),
        migrations.AddField(
            model_name='danceshoplocation',
            name='coordinates',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.DanceShopMapCoordinates'),
        ),
        migrations.AddField(
            model_name='danceshop',
            name='links',
            field=models.ManyToManyField(blank=True, to='entities.DanceShopLink'),
        ),
        migrations.AddField(
            model_name='danceshop',
            name='locations',
            field=models.ManyToManyField(blank=True, to='entities.DanceShopLocation'),
        ),
        migrations.AddField(
            model_name='danceshop',
            name='shop_types',
            field=models.ManyToManyField(blank=True, to='entities.ShopType'),
        ),
        migrations.AddField(
            model_name='dancehalllocation',
            name='coordinates',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.DanceHallMapCoordinates'),
        ),
        migrations.AddField(
            model_name='dancehall',
            name='links',
            field=models.ManyToManyField(blank=True, to='entities.DanceHallLink'),
        ),
        migrations.AddField(
            model_name='dancehall',
            name='locations',
            field=models.ManyToManyField(blank=True, to='entities.DanceHallLocation'),
        ),
        migrations.AddField(
            model_name='danceclass',
            name='dance_class_types',
            field=models.ManyToManyField(blank=True, to='entities.DanceClassType'),
        ),
        migrations.AddField(
            model_name='danceclass',
            name='links',
            field=models.ManyToManyField(blank=True, to='entities.DanceClassLink'),
        ),
        migrations.AddField(
            model_name='audiowikiplaylist',
            name='dance_style',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.DanceStyle'),
        ),
        migrations.AddField(
            model_name='audiowikiplaylist',
            name='link',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.AudioWikiPlaylistLink'),
        ),
        migrations.AddField(
            model_name='audiowiki',
            name='link',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='entities.AudioWikiLink'),
        ),
        migrations.AddField(
            model_name='audiowiki',
            name='tags',
            field=models.ManyToManyField(blank=True, to='entities.AudioWikiTag'),
        ),
    ]
